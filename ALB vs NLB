Here‚Äôs a clear comparison between **Elastic Load Balancer (ELB)** and **Network Load Balancer (NLB)** in AWS:

---

### ‚öñÔ∏è **Elastic Load Balancer (ELB)** ‚Äì Umbrella Term
**ELB** is the general term for AWS's load balancing service. It includes three types:

1. **Application Load Balancer (ALB)** ‚Äì Layer 7 (HTTP/HTTPS)
2. **Network Load Balancer (NLB)** ‚Äì Layer 4 (TCP/UDP)
3. **Gateway Load Balancer (GLB)** ‚Äì For third-party virtual appliances

So when you say **ELB vs NLB**, you're likely comparing **ALB vs NLB**. Here's a breakdown:

---

### üåê **Application Load Balancer (ALB)**
- **Layer**: 7 (Application Layer)
- **Protocol Support**: HTTP, HTTPS, WebSocket
- **Routing**: Smart routing based on URL path, host headers, query strings, etc.
- **Use Case**: Web applications, microservices, container-based apps
- **Features**:
  - Content-based routing
  - SSL termination
  - WebSocket support
  - Authentication via Cognito or OIDC
  - Redirects and fixed responses

---

### üîå **Network Load Balancer (NLB)**
- **Layer**: 4 (Transport Layer)
- **Protocol Support**: TCP, UDP, TLS
- **Routing**: Based on IP protocol data
- **Use Case**: High-performance, low-latency apps (e.g., gaming, real-time systems)
- **Features**:
  - Handles millions of requests per second
  - Preserves client IP
  - Static IP support
  - TLS termination (optional)
  - Zonal failover

---

### üÜö Summary Table

| Feature                  | ALB (Application LB)         | NLB (Network LB)              |
|--------------------------|------------------------------|-------------------------------|
| OSI Layer                | Layer 7                      | Layer 4                       |
| Protocols                | HTTP, HTTPS, WebSocket       | TCP, UDP, TLS                 |
| Routing Type             | Content-based                | Connection-based              |
| Performance              | Moderate                     | Very high                     |
| Client IP Preservation   | No (unless using X-Forwarded-For) | Yes                     |
| Static IP Support        | No                           | Yes                           |
| SSL Termination          | Yes                          | Yes (optional)                |
| Health Checks            | HTTP/HTTPS                   | TCP                           |
| Use Case                 | Web apps, APIs               | Real-time apps, low latency   |

---


You're asking the right question‚Äîespecially since you're working with containerized apps, ALB integrations, and Kubernetes. Here's a deep dive into **Application Load Balancer (ALB)** vs **Network Load Balancer (NLB)** in AWS, tailored to your kind of infrastructure mindset:

---

### ‚öôÔ∏è Core Differences: ALB vs NLB

| Feature                  | **Application Load Balancer (ALB)**                  | **Network Load Balancer (NLB)**                      |
|--------------------------|------------------------------------------------------|------------------------------------------------------|
| **Layer**                | Layer 7 (Application)                                | Layer 4 (Transport)                                  |
| **Protocol Support**     | HTTP, HTTPS, gRPC                                    | TCP, UDP, TLS                                        |
| **Routing Logic**        | Content-based (path, host, headers, query params)    | Connection-based (IP, port)                          |
| **Performance**          | Great for web apps, moderate latency                 | Ultra-low latency, millions of connections           |
| **IP Preservation**      | ‚ùå No (uses LB IP)                                   | ‚úÖ Yes (preserves client IP)                         |
| **Static IP / EIP**      | ‚ùå No                                                | ‚úÖ Yes                                               |
| **TLS Termination**      | ‚úÖ Yes (with ACM)                                    | ‚úÖ Yes (but limited features)                        |
| **WebSocket Support**    | ‚úÖ Yes                                               | ‚úÖ Yes                                               |
| **Health Checks**        | HTTP/HTTPS                                           | TCP                                                  |
| **Use Cases**            | Microservices, REST APIs, web apps                   | Real-time apps, IoT, gaming, legacy TCP apps         |
| **Kubernetes Integration**| Works with AWS Load Balancer Controller (Ingress)   | Works with service type `LoadBalancer`               |

---

### üß† When to Choose What

#### ‚úÖ Use **ALB** if:
- You need **advanced routing** (e.g., `/api/*` to one target group, `/static/*` to another).
- You're deploying **microservices** or **containerized apps** (e.g., ECS, EKS with Ingress).
- You want **SSL termination**, **WAF integration**, or **OIDC authentication**.

#### üöÄ Use **NLB** if:
- You need **ultra-low latency** and **high throughput** (e.g., financial apps, gaming).
- You're handling **non-HTTP protocols** (UDP, TCP, TLS).
- You want to **preserve client IPs** for logging or security.
- You're integrating with **Kubernetes service type `LoadBalancer`** (NLB is default).

---

### Can't ALB preserves Client IP ###

Great catch‚Äîand yes, **ALB *can* preserve the original client IP**, but it does so differently than NLB.

---

### üß† How ALB Preserves Client IP

ALB operates at **Layer 7**, so it doesn't pass the raw IP through the TCP connection like NLB does. Instead, it injects the client IP into the **`X-Forwarded-For` HTTP header**. Here's how it works:

- When a request hits the ALB, it adds:
  - `X-Forwarded-For`: Original client IP
  - `X-Forwarded-Proto`: Original protocol (HTTP/HTTPS)
  - `X-Forwarded-Port`: Original port

Your backend app (e.g., Tomcat, Node.js, Flask) must **extract the IP from this header** rather than relying on the socket connection IP, which will be the ALB‚Äôs internal IP.

---
